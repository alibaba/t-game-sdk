// DemoExternalSources.cpp
// Copyright (C) 2011 Audiokinetic Inc 
/// \file 
/// Defines the methods declared in DemoExternalSources.h.

#include "stdafx.h"
#include "Platform.h"

#include <AK/SoundEngine/Common/AkSoundEngine.h>    // Sound engine

#include "../WwiseProject/GeneratedSoundBanks/Wwise_IDs.h"		// IDs generated by Wwise
#include "Menu.h"
#include "IntegrationDemo.h"
#include "DemoExternalSources.h"
#include "AkFilePackageLowLevelIOBlocking.h"

/////////////////////////////////////////////////////////////////////
// DemoExternalSources Public Methods
/////////////////////////////////////////////////////////////////////

DemoExternalSources::DemoExternalSources( Menu& in_ParentMenu ):Page( in_ParentMenu, "External Sources Demo" )
, m_uPackageID( 0 )
{
	m_szHelp  = "This page shows how to use external sources.\n\n"
				"The same sequence container is used to play either "
				"\"1 2 3\" or \"4 5 6\". The files 1, 2, 3, 4, 5 and "
				"6 are selected dynamically at run-time.";
}

bool DemoExternalSources::Init()
{
	// Load the file package containing the external sources. The external sources are packaged in 
	// a file package called "ExternalSources.pck" when soundbanks are generated. 
	// In section "Post-Generation Step" of the SoundBanks tab of the Project Settings, the following 
	// command line has been added: 
	// "$(WwiseExePath)\tools\FilePackager.Console.exe" -generate "$(WwiseProjectPath)\myFilePackagerProjects\ExternalSources (Windows).wfpproj"
	// The File Packager utility generates the file package(s) described in the File Packager project 
	// myFilePackagerProjects\ExternalSources (Windows).wfpproj. You may open this project using the File Packager 
	// tool (UI mode), and see how all external sources are assigned to the file package "ExternalSources.pck".
	if ( IntegrationDemo::Instance().IOManager().LoadFilePackage( AKTEXT("ExternalSources.pck"), m_uPackageID ) != AK_Success )
	{
		SetLoadFileErrorMessage( "ExternalSources.pck" );
		return false;
	}

	// Load the sound bank that contains our event and sound structure
	AkBankID bankID; // Not used
	if ( AK::SoundEngine::LoadBank( "ExternalSources.bnk", AK_DEFAULT_POOL_ID, bankID ) != AK_Success )
	{
		SetLoadFileErrorMessage( "ExternalSources.bnk" );
		return false;
	}

	// Register the "Human" game object
	AK::SoundEngine::RegisterGameObj( GAME_OBJECT_HUMAN, "Human" );
	
	// Initlialize the page
	return Page::Init();
}

void DemoExternalSources::Release()
{
	AK::SoundEngine::StopAll();

	// Unregister the "Human" game object
	AK::SoundEngine::UnregisterGameObj( GAME_OBJECT_HUMAN );

	// Unload the sound bank
	AK::SoundEngine::UnloadBank( "ExternalSources.bnk", NULL );

	// Unload the file package containing the external sources
	// Note that CAkFilePackageLowLevelIO's file package loading is not thread safe.
	// We need to ensure that there is no more I/O occurring before unloading the 
	// file package. Let's wait a few milliseconds to ensure StopAll() has executed.
	AKPLATFORM::AkSleep( 25 );
	IntegrationDemo::Instance().IOManager().UnloadFilePackage( m_uPackageID );

	// Release the page
	Page::Release();
}


/////////////////////////////////////////////////////////////////////
// DemoExternalSources Private Methods
/////////////////////////////////////////////////////////////////////

void DemoExternalSources::InitControls()
{
	ButtonControl* newBtn;

	// Add the "Play 1 2 3" button
	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Play \"1 2 3\"" );
	newBtn->SetDelegate( (PageMFP)&DemoExternalSources::Play123_Pressed );
	m_Controls.push_back( newBtn );

	// Add the "Play 4 5 6" button
	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Play \"4 5 6\"" );
	newBtn->SetDelegate( (PageMFP)&DemoExternalSources::Play456_Pressed );
	m_Controls.push_back( newBtn );
}

void DemoExternalSources::Play123_Pressed( void*, ControlEvent* )
{
	// Set up external source data for the 3 external sources contained 
	// in each sound of the sequence container.
	// All 3 sounds are streamed (specified by file name).
	// They are streamed from a file package, which was loaded in Init().
	AkExternalSourceInfo sources[3];
	
	// The cookie is the hash of the name of the external source, declared in
	// the sound's Contents Editor.
	sources[0].iExternalSrcCookie = AK::SoundEngine::GetIDFromString("Extern_1st_number");
	// IMPORTANT: The extension HAS to be ".wem". In our external source definition
	// file (WwiseProject/myExternalSources/ExtSourceList.wsources), we may rename the converted 
	// file, but we cannot change the extension. The file is ultimately indexed in the packaged file
	// with its full name, including the extension .wem.
	sources[0].szFile = (AkOSChar*)AKTEXT("01.wem");
	sources[0].idCodec = CODECTYPE_STANDARD;	// Defined in Platform.h (cross-platform ADPCM)
	
	sources[1].iExternalSrcCookie = AK::SoundEngine::GetIDFromString("Extern_2nd_number");		
	sources[1].szFile = (AkOSChar*)AKTEXT("02.wem");
	sources[1].idCodec = CODECTYPE_STANDARD;			
		
	sources[2].iExternalSrcCookie = AK::SoundEngine::GetIDFromString("Extern_3rd_number");		
	sources[2].szFile = (AkOSChar*)AKTEXT("03.wem");
	sources[2].idCodec = CODECTYPE_STANDARD;
	
	AK::SoundEngine::PostEvent( 
		AK::EVENTS::PLAY_THREE_NUMBERS_IN_A_ROW, 
		GAME_OBJECT_HUMAN, 
		0,
		NULL, 
		NULL, 
		3, 
		sources );
}

void DemoExternalSources::Play456_Pressed( void*, ControlEvent* )
{
	AkExternalSourceInfo sources[3];

	// Here, the external source data is set up to play "4", "5" and "6".
	sources[0].iExternalSrcCookie = AK::SoundEngine::GetIDFromString("Extern_1st_number");
	sources[0].szFile = (AkOSChar*)AKTEXT("04.wem");
	sources[0].idCodec = CODECTYPE_STANDARD;
	
	sources[1].iExternalSrcCookie = AK::SoundEngine::GetIDFromString("Extern_2nd_number");		
	sources[1].szFile = (AkOSChar*)AKTEXT("05.wem");
	sources[1].idCodec = CODECTYPE_STANDARD;			
		
	sources[2].iExternalSrcCookie = AK::SoundEngine::GetIDFromString("Extern_3rd_number");		
	sources[2].szFile = (AkOSChar*)AKTEXT("06_high.wem");
	sources[2].idCodec = AKCODECID_PCM;	// This one uses conversion shareset External_HighQuality, 
	// (see WwiseProject/myExternalSources/ExtSourceList.wsources). This conversion setting is in PCM.
	
	AK::SoundEngine::PostEvent( 
		AK::EVENTS::PLAY_THREE_NUMBERS_IN_A_ROW, 
		GAME_OBJECT_HUMAN, 
		0,
		NULL, 
		NULL, 
		3, 
		sources );
}
