// DemoLocalization.cpp
// Copyright (C) 2010 Audiokinetic Inc 
/// \file 
/// Defines the methods declared in DemoLocalization.h.

#include "stdafx.h"
#include "Platform.h"

#include <AK/SoundEngine/Common/AkSoundEngine.h>    // Sound engine

#include "../WwiseProject/GeneratedSoundBanks/Wwise_IDs.h"		// IDs generated by Wwise
#include "Menu.h"
#include "IntegrationDemo.h"
#include "DemoLocalization.h"


/////////////////////////////////////////////////////////////////////
// DemoLocalization Public Methods
/////////////////////////////////////////////////////////////////////

DemoLocalization::DemoLocalization( Menu& in_ParentMenu ):Page( in_ParentMenu, "Localization Demo" )
{
	m_szHelp  = "This page shows how to implement localization by "
				"unloading and reloading language-specific SoundBanks.\n\n"
				"Use the \"Language\" control to toggle between the "
				"available languages, then press the \"Say Hello\" "
				"item to hear a greeting in the selected language.";
}

bool DemoLocalization::Init()
{
	// Load the sound bank
	AkBankID bankID; // Not used
	if ( AK::SoundEngine::LoadBank( "Human.bnk", AK_DEFAULT_POOL_ID, bankID ) != AK_Success )
	{
		SetErrorMessage( "Human.bnk" );
		return false;
	}

	// Register the "Human" game object
	AK::SoundEngine::RegisterGameObj( GAME_OBJECT_HUMAN, "Human" );
	
	// Initlialize the page
	return Page::Init();
}

void DemoLocalization::Release()
{
	// Reset the language to English(US), in case it was changed
	AK::StreamMgr::SetCurrentLanguage( AKTEXT( "English(US)" ) );

	// Unregister the "Human" game object
	AK::SoundEngine::UnregisterGameObj( GAME_OBJECT_HUMAN );

	// Unload the sound bank
	AK::SoundEngine::UnloadBank( "Human.bnk", NULL );

	// Release the page
	Page::Release();
}


/////////////////////////////////////////////////////////////////////
// DemoLocalization Private Methods
/////////////////////////////////////////////////////////////////////

void DemoLocalization::InitControls()
{
	ButtonControl* newBtn;
	ToggleControl* newToggle;

	// Add the "Say Hello" button
	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Say \"Hello\"" );
	newBtn->SetDelegate( (PageMFP)&DemoLocalization::HelloButton_Pressed );
	m_Controls.push_back( newBtn );

	// Add the "Language" toggle
	newToggle = new ToggleControl( *this );
	newToggle->SetLabel( "Language:" );
	newToggle->AddOption( "English(US)" );
	newToggle->AddOption( "French(Canada)" );
	newToggle->SetDelegate( (PageMFP)&DemoLocalization::LanguageToggle_SelectionChanged );
	m_Controls.push_back( newToggle );
}

void DemoLocalization::HelloButton_Pressed( void*, ControlEvent* )
{
	AK::SoundEngine::PostEvent( AK::EVENTS::PLAY_HELLO, GAME_OBJECT_HUMAN );
}

void DemoLocalization::LanguageToggle_SelectionChanged( void* in_pSender, ControlEvent* )
{
	ToggleControl* sender = (ToggleControl*)in_pSender;
	string szLang = sender->SelectedText();

	// Set global language. Through the Low-Level I/O's file location resolver, 
	// the sound bank file will be opened in <BasePath>/<Language>/.

	AkOSChar* pOsCharStr;
	CONVERT_CHAR_TO_OSCHAR(szLang.c_str() , pOsCharStr);

	if ( AK::StreamMgr::SetCurrentLanguage( pOsCharStr ) != AK_Success )
	{
		SetErrorMessage( "Error: Invalid language." );
	}

	// Reload the sound bank
	AK::SoundEngine::UnloadBank( "Human.bnk", NULL );
	AkBankID bankID; // Not used
	if ( AK::SoundEngine::LoadBank( "Human.bnk", AK_DEFAULT_POOL_ID, bankID ) != AK_Success )
	{
		SetLoadFileErrorMessage("Human.bnk" );
	}
}
