// DemoMusicCallbacks.cpp
// Copyright (C) 2010 Audiokinetic Inc
/// \file 
/// Defines the methods declared in DemoInteractiveMusic.h.

#include "stdafx.h"

#include <AK/SoundEngine/Common/AkSoundEngine.h>    // Sound engine
#include <AK/MusicEngine/Common/AkMusicEngine.h>    // Sound engine

// IDs generated by Wwise
#include "Menu.h"
#include "DemoInteractiveMusic.h"

/////////////////////////////////////////////////////////////////////
// DemoInteractiveMusic Public Methods
/////////////////////////////////////////////////////////////////////

DemoInteractiveMusic::DemoInteractiveMusic( Menu& in_ParentMenu ):Page( in_ParentMenu, "Interactive Music Demo" ),
m_iPlayingID( 0 )
{
	m_szHelp =
		"This example uses a Music Switch container. "
		"Try switching states by triggering the event "
		"listed in the demo page. Switching state might produce "
		"a result that is immediate or occur at the time "
		"specified in the rules of the music containers.";
}

bool DemoInteractiveMusic::Init()
{
	// Load the sound bank
	AkBankID bankID; // Not used
	if ( AK::SoundEngine::LoadBank( "InteractiveMusic.bnk", AK_DEFAULT_POOL_ID, bankID ) != AK_Success )
	{
		SetLoadFileErrorMessage( "InteractiveMusic.bnk" );
		return false;
	}

	// Register the "Music" game object
	AK::SoundEngine::RegisterGameObj( GAME_OBJECT_MUSIC, "Music" );

	//Start the interactive music
	m_iPlayingID = AK::SoundEngine::PostEvent( 
		AK::EVENTS::IM_START, 
		GAME_OBJECT_MUSIC, 
		AK_EnableGetMusicPlayPosition );

	// Initialize the page
	return Page::Init();
}

void DemoInteractiveMusic::Release()
{
	// Stop the sound playing
	AK::SoundEngine::StopPlayingID( m_iPlayingID );

	// Unregister the "Music" game object
	AK::SoundEngine::UnregisterGameObj( GAME_OBJECT_MUSIC );

	// Unload the sound bank
	AK::SoundEngine::UnloadBank( "InteractiveMusic.bnk", NULL );

	// Releases the page
	Page::Release();
}

void DemoInteractiveMusic::Draw()
{
	AkSegmentInfo info;

	AK::MusicEngine::GetPlayingSegmentInfo(m_iPlayingID, info);

	Page::Draw();

	char strBuf[256];
	int iSubX = m_pParentMenu->GetWidth() / 4;
	int iSubY = m_pParentMenu->GetHeight() / 4 * 3;

	snprintf( strBuf, 
		256, 
		"Position: %d\nSegment duration: %d\nPre-Entry duration: %d\nPost-Exit duration %d\n",
		(int)info.iCurrentPosition, 
		(int)info.iActiveDuration,
		(int)info.iPreEntryDuration,
		(int)info.iPostExitDuration);
	
	// Draw the interactive music position
	DrawTextOnScreen( strBuf, iSubX, iSubY, DrawStyle_Text );
}

/////////////////////////////////////////////////////////////////////
// DemoInteractiveMusic Private Methods
/////////////////////////////////////////////////////////////////////

void DemoInteractiveMusic::InitControls()
{
	ButtonControl* newBtn;

	// Create all the buttons 
	// All delegates are simply calling events
	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Explore" );
	newBtn->SetDelegate( (PageMFP)&DemoInteractiveMusic::POST_EVENT(IM_EXPLORE) );
	m_Controls.push_back( newBtn );

	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Begin communication" );
	newBtn->SetDelegate( (PageMFP)&DemoInteractiveMusic::POST_EVENT(IM_COMMUNICATION_BEGIN) );
	m_Controls.push_back( newBtn );

	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "They are hostile" );
	newBtn->SetDelegate( (PageMFP)&DemoInteractiveMusic::POST_EVENT(IM_THEYAREHOSTILE) );
	m_Controls.push_back( newBtn );

	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Fight one enemy" );
	newBtn->SetDelegate( (PageMFP)&DemoInteractiveMusic::POST_EVENT(IM_1_ONE_ENEMY_WANTS_TO_FIGHT) );
	m_Controls.push_back( newBtn );


	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Fight two enemies" );
	newBtn->SetDelegate( (PageMFP)&DemoInteractiveMusic::POST_EVENT(IM_2_TWO_ENEMIES_WANT_TO_FIGHT) );
	m_Controls.push_back( newBtn );
	
	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Surrounded by enemies" );
	newBtn->SetDelegate( (PageMFP)&DemoInteractiveMusic::POST_EVENT(IM_3_SURRONDED_BY_ENEMIES) );
	m_Controls.push_back( newBtn );

	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Death is coming" );
	newBtn->SetDelegate( (PageMFP)&DemoInteractiveMusic::POST_EVENT(IM_4_DEATH_IS_COMING) );
	m_Controls.push_back( newBtn );

	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Game Over" );
	newBtn->SetDelegate( (PageMFP)&DemoInteractiveMusic::POST_EVENT(IM_GAMEOVER) );
	m_Controls.push_back( newBtn );

	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Win the fight" );
	newBtn->SetDelegate( (PageMFP)&DemoInteractiveMusic::POST_EVENT(IM_WINTHEFIGHT) );
	m_Controls.push_back( newBtn );
}

