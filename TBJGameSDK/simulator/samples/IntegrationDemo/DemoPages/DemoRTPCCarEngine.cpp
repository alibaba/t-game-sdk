// DemoRTPCCarEngine.cpp
// Copyright (C) 2010 Audiokinetic Inc.
/// \file 
/// Defines the methods declared in DemoRTPCCarEngine.h.

#include "stdafx.h"

#include <AK/SoundEngine/Common/AkSoundEngine.h>    // Sound engine

#include "../WwiseProject/GeneratedSoundBanks/Wwise_IDs.h"		// IDs generated by Wwise
#include "Menu.h"
#include "DemoRTPCCarEngine.h"


/////////////////////////////////////////////////////////////////////
// DemoRTPCCarEngine Public Methods
/////////////////////////////////////////////////////////////////////

DemoRTPCCarEngine::DemoRTPCCarEngine( Menu& in_ParentMenu ):Page( in_ParentMenu, "RTPC Demo (Car Engine)" )
{
	m_szHelp  = "This page demonstrates the type of effects that can be "
				"produced by using an RTPC value. Press the \"Start "
				"Engine\" button to simulate the sound of an active car "
				"engine. Then select the \"RPM\" slider and press LEFT "
				"or RIGHT on the <<DIRECTIONAL_TYPE>> to change its "
				"value.\n\n"
				"The RPM slider is linked with an RTPC value associated "
				"with the engine sound. Modifying the value changes the "
				"properties on the sound object in real time.";
}

bool DemoRTPCCarEngine::Init()
{
	// Load the sound bank
	AkBankID bankID; // Not used
	if ( AK::SoundEngine::LoadBank( "Car.bnk", AK_DEFAULT_POOL_ID, bankID ) != AK_Success )
	{
		SetLoadFileErrorMessage( "Car.bnk" );
		return false;
	}
	
	// Register the "Car" game object
	AK::SoundEngine::RegisterGameObj( GAME_OBJECT_CAR, "Car" );

	// Initialize the page
	m_bPlayingEngine = false;
	return Page::Init();
}

void DemoRTPCCarEngine::Release()
{
	// Unregister the Car game object
	AK::SoundEngine::UnregisterGameObj( GAME_OBJECT_CAR );

	// Unload the soundbank
	AK::SoundEngine::UnloadBank( "Car.bnk", NULL );

	// Release the page
	Page::Release();
}


/////////////////////////////////////////////////////////////////////
// DemoRTPCCarEngine Private Methods
/////////////////////////////////////////////////////////////////////

void DemoRTPCCarEngine::InitControls()
{
	ButtonControl* newButton;
	NumericControl* newNumeric;

	// Add the Start Engine button
	newButton = new ButtonControl( *this );
	newButton->SetLabel( "Start Engine" );
	newButton->SetDelegate( (PageMFP)&DemoRTPCCarEngine::PlayEngineButton_Pressed );
	m_Controls.push_back( newButton );
	
	// Add the RPM Numeric control
	newNumeric = new NumericControl( *this );
	newNumeric->SetLabel( "RPM:" );
	newNumeric->SetMinValue( 1000 );
	newNumeric->SetMaxValue( 10000 );
	newNumeric->SetIncrement( 30 );
	newNumeric->SetInitialIncrement( 50 );
	newNumeric->SetDelegate( (PageMFP)&DemoRTPCCarEngine::RPMNumeric_ValueChanged );
	newNumeric->CallDelegate( NULL ); // Force the RTPC to the correct initial value
	m_Controls.push_back( newNumeric );
}

void DemoRTPCCarEngine::PlayEngineButton_Pressed( void* in_pSender, ControlEvent* )
{
	ButtonControl* sender = (ButtonControl*)in_pSender;

	if ( m_bPlayingEngine )
	{
		sender->SetLabel( "Start Engine" );
		AK::SoundEngine::PostEvent( AK::EVENTS::STOP_ENGINE, GAME_OBJECT_CAR );
	}
	else
	{
		sender->SetLabel( "Stop Engine" );
		AK::SoundEngine::PostEvent( AK::EVENTS::PLAY_ENGINE, GAME_OBJECT_CAR );
	}

	m_bPlayingEngine = !m_bPlayingEngine;
}

void DemoRTPCCarEngine::RPMNumeric_ValueChanged( void* in_pSender, ControlEvent* )
{
	NumericControl* sender = (NumericControl*)in_pSender;

	AK::SoundEngine::SetRTPCValue( AK::GAME_PARAMETERS::RPM, (AkRtpcValue)sender->GetValue(), GAME_OBJECT_CAR );
}
